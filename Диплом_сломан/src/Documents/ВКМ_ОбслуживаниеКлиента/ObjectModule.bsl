#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать();
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Дата КАК Дата,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_ДатаНачала КАК ДатаНачалаДоговора,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_ДатаОкончания КАК ДатаОкончанияДоговора,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВидДоговора КАК ВидДоговора,
		|	СУММА(ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту) КАК КоличествоЧасов,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Клиент КАК Клиент,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор КАК Договор,
		|	СУММА(ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Сумма) КАК СуммаКОплате,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Специалист КАК Сотрудник,
		|	МАКСИМУМ(ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот) КАК ПроцентОтРабот,
		|	МАКСИМУМ(ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_СтоимостьЧасаРаботы) КАК СтоимостьЧасаРаботы,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_СуммаАбонентскойПлаты КАК СуммаАбонентскойПлаты
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, Сотрудник В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВКМ_ОбслуживаниеКлиента.Специалист
		|			ИЗ
		|				Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|		ПО ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Дата,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_ДатаНачала,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_ДатаОкончания,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВидДоговора,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Клиент,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Специалист,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор.ВКМ_СуммаАбонентскойПлаты";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
		Если ВыборкаДетальныеЗаписи.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда 
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вид договора не является абонентским обслуживанием");
			Прервать;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Дата > КонецДня(ВыборкаДетальныеЗаписи.ДатаОкончанияДоговора)
			Или ВыборкаДетальныеЗаписи.Дата < ВыборкаДетальныеЗаписи.ДатаНачалаДоговора
			Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата документа должна быть в границах действия договора на абоненсткое обслуживание!");
			Прервать;
		КонецЕсли;	
		
		Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ПроцентОтРабот) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Специалисту не установлен процент оплаты от работ!");
			Прервать;
		КонецЕсли;	
		
		//регистр ВКМ_ВыполненныеКлиентуРаботы
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		Движение.Период = Дата;
		
		//регистр ВКМ_ВыполненныеСотрудникомРаботы
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Движение.ЧасовКОплате = ВыборкаДетальныеЗаписи.КоличествоЧасов;
		Движение.Процент = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаДетальныеЗаписи.ПроцентОтРабот);
		Движение.СуммаКОплате = ВыборкаДетальныеЗаписи.КоличествоЧасов * ВыборкаДетальныеЗаписи.СтоимостьЧасаРаботы * Движение.Процент / 100;

			
	КонецЦикла;


КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ОбъектУведомленияТГ = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
		ОбъектУведомленияТГ.Текст = СтрШаблон("Создана новая заявка от %1 для обслуживания клиента %2", Дата, Клиент);
		ОбъектУведомленияТГ.Записать();

	КонецЕсли;

	ДатаДокумента = '00010101';
	ДатаПроведенияРаботДок = '00010101';
	ВремяНачалаРаботПланДок =  '00010101000000';
	ВремяОкончанияРаботПланДок =  '00010101000000';
	СпециалистДок = " ";
	
	Если Не ЭтоНовый() Тогда
	 Запрос = Новый Запрос;
	 Запрос.Текст =
	 	"ВЫБРАТЬ
	 	|	ВКМ_ОбслуживаниеКлиента.Дата КАК ДатаДокумента,
	 	|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот,
	 	|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан,
	 	|	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан,
	 	|	ВКМ_ОбслуживаниеКлиента.Специалист
	 	|ИЗ
	 	|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	 	|ГДЕ
	 	|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 Выборка = РезультатЗапроса.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
	 	ДатаДокумента = Выборка.ДатаДокумента;
	 	ДатаПроведенияРаботДок = Выборка.ДатаПроведенияРабот;
	 	ВремяНачалаРаботПланДок = Выборка.ВремяНачалаРаботПлан;
	 	ВремяОкончанияРаботПланДок = Выборка.ВремяОкончанияРаботПлан;
	 	СпециалистДок = Выборка.Специалист; 
	 КонецЕсли;

	Если ДатаДокумента <> Дата Тогда
		ОбъектУведомленияТГ = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
		ОбъектУведомленияТГ.Текст = СтрШаблон("Изменена дата в заявке № %1. Новая дата: %2", Номер, Дата);
		ОбъектУведомленияТГ.Записать();

	КонецЕсли;
	
	Если ДатаПроведенияРаботДок <> ДатаПроведенияРабот Тогда 	 
		ОбъектУведомленияТГ = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
		ОбъектУведомленияТГ.Текст = СтрШаблон("Изменена дата проведения работ в заявке № %1. Новая дата проведения работ: %2", Номер, ДатаПроведенияРабот);
		ОбъектУведомленияТГ.Записать();
		
	КонецЕсли;
	
	Если ВремяНачалаРаботПланДок <> ВремяНачалаРаботПлан Тогда 	
		ОбъектУведомленияТГ = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
		ОбъектУведомленияТГ.Текст = СтрШаблон("Изменено плановое время начала работ в заявке № %1. Новое плановое время: %2", Номер, Формат(ВремяНачалаРаботПлан,"ДЛФ=T;"));
		ОбъектУведомленияТГ.Записать();
	КонецЕсли;
	
	Если ВремяОкончанияРаботПланДок <> ВремяОкончанияРаботПлан Тогда
		ОбъектУведомленияТГ = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
		ОбъектУведомленияТГ.Текст = СтрШаблон("Изменено плановое время окончания работ в заявке № %1. Новое плановое время: %2", Номер, Формат(ВремяОкончанияРаботПлан,"ДЛФ=T;"));
		ОбъектУведомленияТГ.Записать();
	КонецЕсли;
	
	Если СпециалистДок <> Специалист Тогда
		ОбъектУведомленияТГ = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
		ОбъектУведомленияТГ.Текст = СтрШаблон("Изменен специалист в заявке № %1. Новый специалист: %2", Номер, Специалист);
		ОбъектУведомленияТГ.Записать();
	КонецЕсли;
	
	КонецЕсли;
	

КонецПроцедуры


#КонецОбласти
#КонецЕсли
