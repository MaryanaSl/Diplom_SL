
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	// {{ Слукина М.Н.: данные заполнения передаются при массовом создании документов из обработки ВКМ_Массовое создание актов
	 
	Если ТипЗнч(ДанныеЗаполнения) = Тип ("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьНаОснованииДоговораКонтрагента(ДанныеЗаполнения);
		ВыполнитьАвтозаполнение(ЭтотОбъект);
	КонецЕсли;
	
	//}}
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры



Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

КонецПроцедуры

//{{ Слукина М.Н.: при проведении документа вызовем Обработку проерки заполнения
//для исключения ошибки проведения при проверке заполнения реквизита Основание
//если вид договора Абоненское обслуживание
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВидДоговора = ПолучитьВидДоговора(Договор);
	
	НепроверяемыеРеквизиты = Новый Массив();

//Если вид договора абоненское обслуживание,  то реквизит основание добавим 
// в массив непроверяемых реквизитов 
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда 
		НепроверяемыеРеквизиты.Добавить("Основание");
		НепроверяемыеРеквизиты.Добавить("СуммаДокумента");
		ИндексОснование = ПроверяемыеРеквизиты.Найти("Основание");
		ИндексСуммаДокумента = ПроверяемыеРеквизиты.Найти("СуммаДокумента");

// Сообщим платформе, что мы сами обработали проверку заполнения реквизита "Комментарий"
		ПроверяемыеРеквизиты.Удалить(ИндексОснование);
		ПроверяемыеРеквизиты.Удалить(ИндексСуммаДокумента);
	КонецЕсли;

//вызвать процедуру для удаления непроверяемых реквизитов
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);  
	
КонецПроцедуры
//}}

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

	// {{ Слукина М.Н.: Необходимо реализовать процедуру ВыполнитьАвтозаполнение 

	//получить номенклатуру из констант НоменклатураАбонентскаяПлата и 
	//НоменклатураРаботыСпециалиста, если хотя бы одна не заполнена, 
	//необходимо выдать ошибку и прекратить выполнение процедуры,

	//очистить табличную часть.

	//Если в договоре ненулевая сумма абонентской платы, 
	//добавить в табличную часть строку с номенклатурой из константы 
	//НоменклатураАбонентскаяПлата и суммой абонентской платы из договора.

	//Если в месяц даты документа в регистре ВыполненныеКлиентуРаботы 
	//есть информация о выполненных работах по этому договору, 
	//добавить в ЧТ строку с номенклатурой из константы НоменклатураРаботыСпециалиста и 
	//общим количеством и суммой из регистра ВыполненныеКлиентуРаботы за месяц документа.

Процедура ВыполнитьАвтозаполнение(Объект) Экспорт
	
	НоменклатураАбонентскаяПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	
	Если Не ЗначениеЗаполнено(НоменклатураАбонентскаяПлата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить константу номенклатура абонентская плата");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураРаботыСпециалиста) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить константу номенклатура работы специалиста");
		Возврат;
	КонецЕсли;

	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
Запрос = Новый Запрос;
Запрос.Текст =
	"ВЫБРАТЬ
	|	ВКМ_ВыполненныеКлиентуРаботы.Клиент,
	|	ВКМ_ВыполненныеКлиентуРаботы.Договор,
	|	ЕСТЬNULL(СУММА(ВКМ_ВыполненныеКлиентуРаботы.КоличествоЧасов), 0) КАК КоличествоЧасов,
	|	ЕСТЬNULL(СУММА(ВКМ_ВыполненныеКлиентуРаботы.СуммаКОплате), 0) КАК СуммаКОплате,
	|	ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты КАК СуммаАбонентскойПлаты
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы КАК ВКМ_ВыполненныеКлиентуРаботы
	|		ПО ДоговорыКонтрагентов.Ссылка = ВКМ_ВыполненныеКлиентуРаботы.Договор
	|		И ДоговорыКонтрагентов.Владелец = ВКМ_ВыполненныеКлиентуРаботы.Клиент
	|		И ВКМ_ВыполненныеКлиентуРаботы.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ВыполненныеКлиентуРаботы.Договор,
	|	ВКМ_ВыполненныеКлиентуРаботы.Клиент,
	|	ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты,
	|	ВКМ_ВыполненныеКлиентуРаботы.Регистратор.Специалист";

Запрос.УстановитьПараметр("Период", Дата);
Запрос.УстановитьПараметр("Ссылка", Объект.Договор);


РезультатЗапроса = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();


Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		Если ВыборкаДетальныеЗаписи.СуммаАбонентскойПлаты <> 0 Тогда
			НоваяСтрокаТЧ = Объект.Услуги.Добавить();
			НоваяСтрокаТЧ.Номенклатура = НоменклатураАбонентскаяПлата;
			НоваяСтрокаТЧ.Количество = 1;
			НоваяСтрокаТЧ.Сумма = ВыборкаДетальныеЗаписи.СуммаАбонентскойПлаты;
		КонецЕсли;
	
		Если ВыборкаДетальныеЗаписи.КоличествоЧасов <> 0 Тогда
			НоваяСтрокаТЧ = Объект.Услуги.Добавить();
			НоваяСтрокаТЧ.Номенклатура = НоменклатураРаботыСпециалиста;
			НоваяСтрокаТЧ.Количество = ВыборкаДетальныеЗаписи.КоличествоЧасов;
			НоваяСтрокаТЧ.Сумма = ВыборкаДетальныеЗаписи.СуммаКОплате;
		КонецЕсли;

КонецЦикла;

КонецПроцедуры

//}}
	
//{{Слукина М.Н. Процедура заполняет реквизиты при создании реализации из обработки МассовоеСозданиеАктов
Процедура ЗаполнитьНаОснованииДоговораКонтрагента(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация КАК Организация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	Контрагент = Выборка.Контрагент;
	Организация = Выборка.Организация;
	Договор = Выборка.Договор;

КонецПроцедуры
//}}

//{{ Слукина М.Н. Функция для получения вида договора
Функция ПолучитьВидДоговора(Договор) 
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВидДоговора = ВыборкаДетальныеЗаписи.ВидДоговора;
	КонецЕсли;
	
	Возврат ВидДоговора;

КонецФункции
//}}
#КонецОбласти

#КонецЕсли
